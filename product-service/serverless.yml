service: product-service

frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: dev
  region: eu-west-1
  httpApi: {
    cors: true
  }

  environment:
    SNS_TOPIC_NAME:
      Ref: createProductTopic

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource: 
        Ref: createProductTopic

plugins:
  - serverless-webpack
  - serverless-auto-swagger
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true
    packager: 'npm'
    excludeFiles: ["*.d.js","*.d.ts", "*.py"]
  exportName: 'custom-name-for-queue'

  autoswagger:
    apiType: 'httpApi'
    host: '23ld61bqe2.execute-api.eu-west-1.amazonaws.com/'
    typefiles: []
    schemes: ['http', 'https', 'ws', 'wss']
    generateSwaggerOnDeploy: false
    
functions:
  getProductsById:
    handler: handler.getProductsById
    events:
    - httpApi:
        path: /products/{id}
        method: get
        cors: true

  getProductsList:
    handler: handler.getProductsList
    events:
    - httpApi:
        path: /products
        method: get
        cors: true

  createProduct:
    handler: handler.createProduct
    events:
    - httpApi:
        path: /products
        method: post
        cors: true

  seedEntries:
    handler: handler.seedEntries
    events:
    - httpApi:
        path: /seed
        method: post
        cors: true
 
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
    - sqs:
        batchSize: 5
        arn: 
          Fn::GetAtt: [catalogItemsQueue, Arn]

resources:
  Resources:
    Products:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: aws_products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    Stocks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: aws_stocks
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:QUEUE_NAME}

    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${env:TOPIC_NAME}

    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_SUBSCRIPTION_EMAIL}
        Protocol: email
        TopicArn:
          Ref: createProductTopic

    SNSSubscriptionTooExpensive:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_SUBSCRIPTION_EMAIL_EXPENSIVE}
        Protocol: email
        TopicArn:
          Ref: createProductTopic
        FilterPolicy:
          { "event": ["product_created"], "price": [{ "numeric": [">=", 100] }] }

  Outputs:
    catalogItemsQueueArn:
      Description: "Catalog Queue Arn value"
      Value:
        Fn::GetAtt:
          - catalogItemsQueue
          - Arn
      Export:
        Name: custom-name-for-queue-catalogItemsQueueArn
    catalogItemsQueueUrl:
      Description: "Catalog Queue Url value"
      Value:
        Ref: catalogItemsQueue
      Export:
        Name: custom-name-for-queue-catalogItemsQueueUrl          


configValidationMode: warn